{"componentChunkName":"component---src-templates-post-templates-tsx","path":"/posts/4/","result":{"pageContext":{"html":"<h1>App.css</h1>\n<pre><code class=\"language-css\">.App {\n  text-align: center;\n}\n\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n</code></pre>\n<ul>\n<li>css에서 중요한 부분중 하나는 중복되는 클래스 명을 만들지 않는 것이다.</li>\n<li>create-react-app에서는 자동생성되는 app.css를 기준으로 컴포넌트명-클래스 의 네이밍 규칙을 갖고있다.</li>\n</ul>\n<h1>App.css(class명으로)</h1>\n<pre><code class=\"language-css\">.App {\n  text-align: center;\n}\n\n.App .logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n</code></pre>\n<ul>\n<li>위 처럼 App이라는 클래스 명의 태그 안에 logo라는 클래스 명의 태그를 꾸며주는 css를 작성할 수도 있다.</li>\n</ul>\n<h1>App.css(tag명으로)</h1>\n<pre><code class=\"language-css\">.App {\n  text-align: center;\n}\n\n.App img {\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n}\n</code></pre>\n<ul>\n<li>위 처럼 App이라는 클래스 명의 태그 안에  img 태그를 꾸며주는 css를 작성할 수도 있다.</li>\n</ul>\n<h1>Sidebar.js</h1>\n<pre><code class=\"language-jsx\">import React from 'react';\nimport { Route,BrowserRouter as Router, Link } from \"react-router-dom\";\nimport Post from './Post'\nimport Editor from './Editor'\nimport '../Component/Sidebar.css'\n\nfunction Sidebar (){\n    return (\n      &#x3C;Router>\n        &#x3C;div className=\"header\">\n        &#x3C;/div>\n        &#x3C;div className=\"sidenav\">\n          &#x3C;Link to=\"/Post\">POST&#x3C;/Link>\n          &#x3C;Link to=\"/Editor\">EDITOR&#x3C;/Link>\n        &#x3C;/div>\n        &#x3C;div id=\"main\">\n          &#x3C;Route path=\"/Editor\" component={Editor} />\n          &#x3C;Route path=\"/Post\" component={Post} />\n        &#x3C;/div>\n      &#x3C;/Router>\n    );\n}\n  \n  export default Sidebar;\n</code></pre>\n<h1>Sidebar.css</h1>\n<pre><code class=\"language-css\">.sidenav Link {        /* 이렇게 작동을 할까? */\n    padding: 6px 8px 6px 16px;\n    text-decoration: none;\n    font-size: 25px;\n    color: #818181;\n    display: block;\n}\n</code></pre>\n<ul>\n<li>그렇다면 위와 같이 작성된 React 컴포넌트를 기준으로 tag를 꾸며주는 선택자로 React의 Component도 꾸며줄 수 있을까?</li>\n<li>정답은 No, Link는 React내 에서 사용되는 Component에는 영향을 주지 못한다.</li>\n<li>HTML에 출력되는 tag를 기준으로 하거나 class명을 주면 됨, Link의 경우에는 a tag로 치환되므로 .sidenav a{} 와 같이 사용해도 동작</li>\n</ul>","title":"react에서 css사용하기1"}}}