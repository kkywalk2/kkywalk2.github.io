{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/seo.js"],"names":["IndexPage","React","memo","props","data","tags","pageContext","title","allMarkdownRemark","edges","map","node","frontmatter","undefined","key","id","to","path","date","excerpt","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"01FAkCMA,EAA0CC,IAAMC,MAAK,SAAAC,GACvD,IAAMC,EAAO,OACLC,EAASF,EAAMG,YAAfD,KACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKE,MAAM,SACX,4BAAKF,GACL,4BACKD,EAAKI,kBAAkBC,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACjC,GAAY,IAARN,GAAcA,GAAQM,EAAKC,YAAYP,MAAgBQ,MAARR,EAC/C,OACI,wBAAIS,IAAKH,EAAKI,IACV,4BACI,kBAAC,OAAD,CAAMC,GAAIL,EAAKC,YAAYK,MAAON,EAAKC,YAAYL,QAEvD,4BAAKI,EAAKC,YAAYM,MACtB,2BAAIP,EAAKQ,SACT,sCASjBnB,a,mFCjDf,SAASoB,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMhB,EAAS,EAATA,MAC9BiB,EADuC,OACvCA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFf,MAAOA,EACPqB,cAAa,QAAUJ,EAAKE,aAAanB,MACzCgB,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASvB,GAEX,CACEwB,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASvB,GAEX,CACEsB,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-index-tsx-0bc57e02b209e6c9efb0.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar\"\n\nimport { ITemplateProps } from '../interface';\n\ntype IPostTemplateProps = ITemplateProps<{\n    tags: string;\n}>;\n\nconst LatestPostListQuery = graphql`\n        query LatestPostListQuery {\n            allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n                edges {\n                    node {\n                        excerpt(truncate: true, pruneLength: 200)\n                        frontmatter {\n                            title\n                            path\n                            tags\n                            date(formatString: \"YYYY-MM-DD HH:mm:ss\")\n                        }\n                        id\n                    }\n                }\n            }\n        }\n    `;\n\nconst IndexPage: React.FC<IPostTemplateProps> = React.memo(props => {\n    const data = useStaticQuery(LatestPostListQuery);\n    const { tags } = props.pageContext;\n    return (\n        <Layout>\n            <Sidebar></Sidebar>\n            <SEO title=\"Home\" />\n            <h1>{tags}</h1>\n            <ul>\n                {data.allMarkdownRemark.edges.map(({ node }) => {\n                    if (tags == \"\" || tags == node.frontmatter.tags || tags == undefined)\n                        return (\n                            <li key={node.id}>\n                                <h2>\n                                    <Link to={node.frontmatter.path}>{node.frontmatter.title}</Link>\n                                </h2>\n                                <h3>{node.frontmatter.date}</h3>\n                                <p>{node.excerpt}</p>\n                                <hr />\n                            </li>\n                        )\n                })}\n            </ul>\n        </Layout>\n    );\n})\n\nexport default IndexPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}